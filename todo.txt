package main

import (
	"context"
	"fmt"
	"log"
	"net/http"
	"time"

	"github.com/gin-gonic/gin"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/mongo"
	"go.mongodb.org/mongo-driver/mongo/options"
)

// type User struct {
// 	ID    primitive.ObjectID `bson:"_id,omitempty"`
// 	Name  string             `bson:"name,omitempty"`
// 	Email string             `bson:"email,omitempty"`
// 	Age   int                `bson:"age,omitempty"`
// }

var (
	// client     *mongo.Client
	collection *mongo.Collection
)

// Todo structure
type Todo struct {
	Title       string    `json:"title"`
	Description string    `json:"description"`
	IsDone      bool      `json:"isDone"`
	CreatedAt   time.Time `json:"created_at"`
}

func main() {
	// Initialize the Gin router
	r := gin.Default()

	// Connect to MongoDB
	clientOptions := options.Client().ApplyURI("mongodb://mongo:9SIA8PpHlIQggvLBA6Mb@containers-us-west-188.railway.app:5655")
	client, err := mongo.Connect(context.TODO(), clientOptions)
	if err != nil {
		log.Fatal(err)
	}

	// Check if the MongoDB collections exist, create them if not
	collection = client.Database("todoapp").Collection("todos")
	_, err = collection.Indexes().CreateOne(
		context.TODO(),
		mongo.IndexModel{
			Keys:    bson.D{{"title", 1}},
			Options: options.Index().SetUnique(true),
		},
	)
	if err != nil {
		log.Fatal(err)
	}

	// Define routes
	r.GET("/todos", getTodos)
	r.POST("/todos", createTodo)

	// Run the server
	port := ":8080"
	fmt.Printf("Server is running on port %s\n", port)
	r.Run(port)
}

// Get all Todos
func getTodos(c *gin.Context) {
	var todos []Todo

	cursor, err := collection.Find(context.TODO(), bson.M{})
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	defer cursor.Close(context.TODO())

	for cursor.Next(context.TODO()) {
		var todo Todo
		cursor.Decode(&todo)
		todos = append(todos, todo)
	}

	c.JSON(http.StatusOK, todos)
}

// Create a new Todo
func createTodo(c *gin.Context) {
	var todo Todo

	if err := c.BindJSON(&todo); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	todo.CreatedAt = time.Now()

	_, err := collection.InsertOne(context.TODO(), todo)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusCreated, todo)
}
